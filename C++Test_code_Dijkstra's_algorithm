#include <iostream>
#include <cassert>
#include <vector>

using namespace std;

const int INF = numeric_limits<int>::max();

struct Edge {
    int to;
    int cost;
    Edge(int t, int c) : to(t), cost(c) {}
};

typedef vector<vector<Edge>> Graph;

vector<int> dijkstra(const Graph& G, int s) {
    int N = G.size();
    vector<int> dist(N, INF);
    dist[s] = 0;
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> que;
    que.push(make_pair(0, s));
    while (!que.empty()) {
        int d = que.top().first;
        int v = que.top().second;
        que.pop();
        if (dist[v] < d) {
            continue;
        }
        for (const Edge& e : G[v]) {
            if (dist[e.to] > dist[v] + e.cost) {
                dist[e.to] = dist[v] + e.cost;
                que.push(make_pair(dist[e.to], e.to));
            }
        }
    }
    return dist;
}

int main() {
    // テストケース1: 単一のノード
    {
        Graph G(1);
        vector<int> expected{0};
        assert(dijkstra(G, 0) == expected);
    }

    // テストケース2: 単一の辺
    {
        Graph G(2);
        G[0].push_back(Edge(1, 2));
        vector<int> expected{0, 2};
        assert(dijkstra(G, 0) == expected);
    }

    // テストケース3: 複数の辺
    {
        Graph G(4);
        G[0].push_back(Edge(1, 2));
        G[1].push_back(Edge(2, 3));
        G[2].push_back(Edge(3, 4));
        G[0].push_back(Edge(3, 5));
        vector<int> expected{0, 2, 5, 5};
        assert(dijkstra(G, 0) == expected);
    }

    cout << "All test cases passed." << endl;
    return 0;
}
